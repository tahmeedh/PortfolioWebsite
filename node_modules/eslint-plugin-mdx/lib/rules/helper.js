import { __spreadArrays } from "tslib";
import path from 'path';
import { cosmiconfigSync } from 'cosmiconfig';
import remarkMdx from 'remark-mdx';
import remarkParse from 'remark-parse';
import remarkStringify from 'remark-stringify';
import unified from 'unified';
export var requirePkg = function (plugin, prefix, filePath) {
    if (filePath && /^\.\.?([\\/]|$)/.test(plugin)) {
        plugin = path.resolve(path.dirname(filePath), plugin);
    }
    prefix = prefix.endsWith('-') ? prefix : prefix + '-';
    var packages = [
        plugin,
        plugin.startsWith('@')
            ? plugin.replace('/', '/' + prefix)
            : prefix + plugin,
    ];
    var error;
    for (var _i = 0, packages_1 = packages; _i < packages_1.length; _i++) {
        var pkg = packages_1[_i];
        try {
            // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports
            return require(pkg);
        }
        catch (err) {
            if (!error) {
                error = err;
            }
        }
    }
    throw error;
};
var searchSync;
var remarkProcessor;
export var getRemarkProcessor = function (searchFrom) {
    if (!searchSync) {
        searchSync = cosmiconfigSync('remark', {
            packageProp: 'remarkConfig',
        }).search;
    }
    if (!remarkProcessor) {
        remarkProcessor = unified()
            .use(remarkParse)
            .freeze();
    }
    /* istanbul ignore next */
    var _a = searchSync(searchFrom) || {}, config = _a.config, filepath = _a.filepath;
    /* istanbul ignore next */
    var _b = config || {}, _c = _b.plugins, plugins = _c === void 0 ? [] : _c, settings = _b.settings;
    try {
        // disable this rule automatically since we already have a parser option `extensions`
        // eslint-disable-next-line node/no-extraneous-require
        plugins.push([require.resolve('remark-lint-file-extension'), false]);
    }
    catch (e) {
        // just ignore if the package does not
    }
    return plugins
        .reduce(function (processor, pluginWithSettings) {
        var _a = Array.isArray(pluginWithSettings)
            ? pluginWithSettings
            : [pluginWithSettings], plugin = _a[0], pluginSettings = _a.slice(1);
        return processor.use.apply(processor, __spreadArrays([
            /* istanbul ignore next */
            typeof plugin === 'string'
                ? requirePkg(plugin, 'remark', filepath)
                : plugin], pluginSettings));
    }, remarkProcessor()
        .use({ settings: settings })
        .use(remarkStringify)
        .use(remarkMdx))
        .freeze();
};
//# sourceMappingURL=helper.js.map