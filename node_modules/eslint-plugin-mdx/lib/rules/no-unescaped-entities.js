/// <reference path="../../typings.d.ts" />
import { __assign } from "tslib";
import { isJsxNode, openTag } from 'eslint-mdx';
import reactNoUnescapedEntities from 'eslint-plugin-react/lib/rules/no-unescaped-entities';
// copied from `eslint-plugin-react`
var DEFAULTS = [
    {
        char: '>',
        alternatives: ['&gt;'],
    },
    {
        char: '"',
        alternatives: ['&quot;', '&ldquo;', '&#34;', '&rdquo;'],
    },
    {
        char: "'",
        alternatives: ['&apos;', '&lsquo;', '&#39;', '&rsquo;'],
    },
    {
        char: '}',
        alternatives: ['&#125;'],
    },
];
var EXPRESSION = 'Literal, JSXText';
export var noUnescapedEntities = __assign(__assign({}, reactNoUnescapedEntities), { create: function (context) {
        var _a;
        var configuration = context.options[0] || {};
        var entities = configuration.forbid || DEFAULTS;
        return _a = {},
            // eslint-disable-next-line sonarjs/cognitive-complexity
            _a[EXPRESSION] = function (node) {
                var parent = node.parent;
                if (!isJsxNode(parent)) {
                    return;
                }
                while (parent) {
                    if (parent.parent.type === 'Program') {
                        break;
                    }
                    else {
                        parent = parent.parent;
                    }
                }
                var _a = node.loc, _b = _a.start, startLine = _b.line, startColumn = _b.column, _c = _a.end, endLine = _c.line, endColumn = _c.column;
                var lines = context.getSourceCode().lines;
                var firstLineOffset = parent.loc.start.line < startLine
                    ? 0
                    : lines
                        .slice(startLine - 1, endLine)
                        .join('\n')
                        .search(openTag);
                /* istanbul ignore if */
                if (firstLineOffset < 0) {
                    // should never happen, just for robustness
                    firstLineOffset = 0;
                }
                var _loop_1 = function (i) {
                    var rawLine = lines[i - 1];
                    var start = 0;
                    var end = rawLine.length;
                    if (i === startLine) {
                        start = startColumn + firstLineOffset;
                    }
                    if (i === endLine) {
                        end = endColumn;
                        if (i === startLine) {
                            end += firstLineOffset;
                        }
                    }
                    rawLine = rawLine.substring(start, end);
                    entities.forEach(function (entity) {
                        for (var index = 0; index < rawLine.length; index++) {
                            var char = rawLine[index];
                            if (typeof entity === 'string') {
                                if (char === entity) {
                                    context.report({
                                        loc: { line: i, column: start + index },
                                        message: "HTML entity, `" + entity + "` , must be escaped.",
                                        node: node,
                                    });
                                }
                            }
                            else if (char === entity.char) {
                                context.report({
                                    loc: { line: i, column: start + index },
                                    message: "`" + entity.char + "` can be escaped with " + entity.alternatives
                                        .map(function (alt) { return '``'.split('').join(alt); })
                                        .join(', ') + ".",
                                    node: node,
                                });
                            }
                        }
                    });
                };
                for (var i = startLine; i <= endLine; i++) {
                    _loop_1(i);
                }
            },
            _a;
    } });
//# sourceMappingURL=no-unescaped-entities.js.map