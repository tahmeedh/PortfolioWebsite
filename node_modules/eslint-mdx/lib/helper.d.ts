/// <reference path="../typings.d.ts" />
import { AST } from 'eslint';
import { Arrayable, JsxNode, JsxTypes, ParserFn } from './types';
export declare const FALLBACK_PARSERS: readonly ["@typescript-eslint/parser", "babel-eslint"];
export declare const JSX_TYPES: JsxTypes;
export declare const isJsxNode: (node: {
    type: string;
}) => node is JsxNode;
export declare const normalizeParser: (parser?: string | ParserFn | {
    parseForESLint: ParserFn;
} | {
    parse: ParserFn;
}) => ParserFn[];
export declare const normalizePosition: (position: import("unist").Position) => Pick<AST.Program, "loc" | "range"> & {
    start: number;
    end: number;
};
export interface BaseNode {
    type: string;
    loc?: import('estree').SourceLocation;
    range?: [number, number];
}
export declare function restoreNodeLocation<T extends BaseNode>(node: T, startLine: number, offset: number): T;
export declare const first: <T>(items: T[] | readonly T[]) => T;
export declare const last: <T>(items: T[] | readonly T[]) => T;
export declare const hasProperties: <T, P extends keyof T = keyof T>(obj: {}, properties: Arrayable<P>) => obj is T;
//# sourceMappingURL=helper.d.ts.map