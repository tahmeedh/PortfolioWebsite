import { last } from './helper';
import { isCloseTag, isComment, isOpenCloseTag, isOpenTag, isSelfClosingTag, } from './regexp';
var Traverse = /** @class */ (function () {
    function Traverse(_a) {
        var enter = _a.enter;
        this._enter = enter;
    }
    Traverse.prototype.combineLeftJsxNodes = function (jsxNodes) {
        return {
            type: 'jsx',
            data: jsxNodes[0].data,
            value: jsxNodes.reduce(function (acc, _a) {
                var value = _a.value;
                return (acc += value);
            }, ''),
            position: {
                start: jsxNodes[0].position.start,
                end: last(jsxNodes).position.end,
            },
        };
    };
    // fix #7
    Traverse.prototype.combineJsxNodes = function (nodes) {
        var _this = this;
        var offset = 0;
        var jsxNodes = [];
        var length = nodes.length;
        // eslint-disable-next-line sonarjs/cognitive-complexity
        return nodes.reduce(function (acc, node, index) {
            if (node.type === 'jsx') {
                var value = node.value;
                if (isOpenTag(value)) {
                    offset++;
                    jsxNodes.push(node);
                }
                else {
                    if (isCloseTag(value)) {
                        offset--;
                    }
                    // prettier-ignore
                    /* istanbul ignore next */
                    else if (!isComment(value) &&
                        !isSelfClosingTag(value) &&
                        !isOpenCloseTag(value)) {
                        // should never happen, just for robustness
                        var start = node.position.start;
                        throw Object.assign(new SyntaxError('unknown jsx node: ' + JSON.stringify(value)), {
                            lineNumber: start.line,
                            column: start.column,
                            index: start.offset,
                        });
                    }
                    jsxNodes.push(node);
                    if (!offset) {
                        acc.push(_this.combineLeftJsxNodes(jsxNodes));
                        jsxNodes.length = 0;
                    }
                }
            }
            else if (offset) {
                jsxNodes.push(node);
            }
            else {
                acc.push(node);
            }
            if (index === length - 1 && jsxNodes.length) {
                acc.push(_this.combineLeftJsxNodes(jsxNodes));
            }
            return acc;
        }, []);
    };
    Traverse.prototype.traverse = function (node, parent) {
        var _this = this;
        /* istanbul ignore if */
        if (!node) {
            // should never happen, just for robustness
            return;
        }
        var children = node.children;
        if (children) {
            children = node.children = this.combineJsxNodes(children);
            children.forEach(function (child) { return _this.traverse(child, node); });
        }
        this._enter(node, parent);
    };
    return Traverse;
}());
export { Traverse };
export var traverse = function (root, options) {
    return new Traverse(options).traverse(root);
};
//# sourceMappingURL=traverse.js.map