{"expireTime":9007200854730335000,"key":"gatsby-plugin-mdx-entire-payload-8f980bf60696642a06492d0ac5e4a577-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The interactive agent is based on a simple neural-network and deep learning model that can be created using the TensorFlow and TfLearn Python libraries. Created custom tokenized data sets sorted by the pre-processinglibrary (nltk) and stored into dictionary arrays and converted intonumpyarrays to train neural network on user input patterns. Features implemented such as synonym recognition, spelling mistake recognition, and named entity recognition. ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":454,"offset":454},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":454,"offset":454},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Machine Learning Model\",\"category\":\"Interactive Agent\",\"emoji\":\"ðŸ¤–\",\"screenshot\":\"./chatbot.jpg\",\"github\":\"https://github.com/sabry2000/InteractiveAgent\",\"external\":\"\",\"tags\":[\"Deep Learning\",\"Python\",\"Trained Data Model\",\"TensorFlow\"],\"visible\":\"true\",\"position\":2}","position":{"start":{"line":4,"column":1,"offset":456},"end":{"line":4,"column":305,"offset":760},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":4,"column":305,"offset":760}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Machine Learning Model\",\n  \"category\": \"Interactive Agent\",\n  \"emoji\": \"ðŸ¤–\",\n  \"screenshot\": \"./chatbot.jpg\",\n  \"github\": \"https://github.com/sabry2000/InteractiveAgent\",\n  \"external\": \"\",\n  \"tags\": [\"Deep Learning\", \"Python\", \"Trained Data Model\", \"TensorFlow\"],\n  \"visible\": \"true\",\n  \"position\": 2\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The interactive agent is based on a simple neural-network and deep learning model that can be created using the TensorFlow and TfLearn Python libraries. Created custom tokenized data sets sorted by the pre-processinglibrary (nltk) and stored into dictionary arrays and converted intonumpyarrays to train neural network on user input patterns. Features implemented such as synonym recognition, spelling mistake recognition, and named entity recognition. \"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Machine Learning Model\",\n  \"category\": \"Interactive Agent\",\n  \"emoji\": \"ðŸ¤–\",\n  \"screenshot\": \"./chatbot.jpg\",\n  \"github\": \"https://github.com/sabry2000/InteractiveAgent\",\n  \"external\": \"\",\n  \"tags\": [\"Deep Learning\", \"Python\", \"Trained Data Model\", \"TensorFlow\"],\n  \"visible\": \"true\",\n  \"position\": 2\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`The interactive agent is based on a simple neural-network and deep learning model that can be created using the TensorFlow and TfLearn Python libraries. Created custom tokenized data sets sorted by the pre-processinglibrary (nltk) and stored into dictionary arrays and converted intonumpyarrays to train neural network on user input patterns. Features implemented such as synonym recognition, spelling mistake recognition, and named entity recognition. `}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}